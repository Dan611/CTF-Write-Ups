import binascii

crc_dat = \
[
    0x00000000, 0x00000000, 0x30358979, 0x7AD870C8, 0x606B12F2, 0xF5B0E190, 0x505E9B8B, 0x8F689158,
    0x9841B68F, 0xC038E573, 0xA8743FF6, 0xBAE095BB, 0xF82AA47D, 0x358804E3, 0xC81F2D04, 0x4F50742B,
    0x6814FE75, 0xAB28ECB4, 0x5821770C, 0xD1F09C7C, 0x087FEC87, 0x5E980D24, 0x384A65FE, 0x24407DEC,
    0xF05548FA, 0x6B1009C7, 0xC060C183, 0x11C8790F, 0x903E5A08, 0x9EA0E857, 0xA00BD371, 0xE478989F,
    0x88BE6F81, 0x7D08FF3B, 0xB88BE6F8, 0x07D08FF3, 0xE8D57D73, 0x88B81EAB, 0xD8E0F40A, 0xF2606E63,
    0x10FFD90E, 0xBD301A48, 0x20CA5077, 0xC7E86A80, 0x7094CBFC, 0x4880FBD8, 0x40A14285, 0x32588B10,
    0xE0AA91F4, 0xD620138F, 0xD09F188D, 0xACF86347, 0x80C18306, 0x2390F21F, 0xB0F40A7F, 0x594882D7,
    0x78EB277B, 0x1618F6FC, 0x48DEAE02, 0x6CC08634, 0x18803589, 0xE3A8176C, 0x28B5BCF0, 0x997067A4,
    0x117CDF02, 0xFA11FE77, 0x2149567B, 0x80C98EBF, 0x7117CDF0, 0x0FA11FE7, 0x41224489, 0x75796F2F,
    0x893D698D, 0x3A291B04, 0xB908E0F4, 0x40F16BCC, 0xE9567B7F, 0xCF99FA94, 0xD963F206, 0xB5418A5C,
    0x79682177, 0x513912C3, 0x495DA80E, 0x2BE1620B, 0x19033385, 0xA489F353, 0x2936BAFC, 0xDE51839B,
    0xE12997F8, 0x9101F7B0, 0xD11C1E81, 0xEBD98778, 0x8142850A, 0x64B11620, 0xB1770C73, 0x1E6966E8,
    0x99C2B083, 0x8719014C, 0xA9F739FA, 0xFDC17184, 0xF9A9A271, 0x72A9E0DC, 0xC99C2B08, 0x08719014,
    0x0183060C, 0x4721E43F, 0x31B68F75, 0x3DF994F7, 0x61E814FE, 0xB29105AF, 0x51DD9D87, 0xC8497567,
    0xF1D64EF6, 0x2C31EDF8, 0xC1E3C78F, 0x56E99D30, 0x91BD5C04, 0xD9810C68, 0xA188D57D, 0xA3597CA0,
    0x6997F879, 0xEC09088B, 0x59A27100, 0x96D17843, 0x09FCEA8B, 0x19B9E91B, 0x39C963F2, 0x636199D3,
    0x7A6E2D6F, 0xDF7ADABD, 0x4A5BA416, 0xA5A2AA75, 0x1A053F9D, 0x2ACA3B2D, 0x2A30B6E4, 0x50124BE5,
    0xE22F9BE0, 0x1F423FCE, 0xD21A1299, 0x659A4F06, 0x82448912, 0xEAF2DE5E, 0xB271006B, 0x902AAE96,
    0x127AD31A, 0x74523609, 0x224F5A63, 0x0E8A46C1, 0x7211C1E8, 0x81E2D799, 0x42244891, 0xFB3AA751,
    0x8A3B6595, 0xB46AD37A, 0xBA0EECEC, 0xCEB2A3B2, 0xEA507767, 0x41DA32EA, 0xDA65FE1E, 0x3B024222,
    0xF2D042EE, 0xA2722586, 0xC2E5CB97, 0xD8AA554E, 0x92BB501C, 0x57C2C416, 0xA28ED965, 0x2D1AB4DE,
    0x6A91F461, 0x624AC0F5, 0x5AA47D18, 0x1892B03D, 0x0AFAE693, 0x97FA2165, 0x3ACF6FEA, 0xED2251AD,
    0x9AC4BC9B, 0x095AC932, 0xAAF135E2, 0x7382B9FA, 0xFAAFAE69, 0xFCEA28A2, 0xCA9A2710, 0x8632586A,
    0x02850A14, 0xC9622C41, 0x32B0836D, 0xB3BA5C89, 0x62EE18E6, 0x3CD2CDD1, 0x52DB919F, 0x460ABD19,
    0x6B12F26D, 0x256B24CA, 0x5B277B14, 0x5FB35402, 0x0B79E09F, 0xD0DBC55A, 0x3B4C69E6, 0xAA03B592,
    0xF35344E2, 0xE553C1B9, 0xC366CD9B, 0x9F8BB171, 0x93385610, 0x10E32029, 0xA30DDF69, 0x6A3B50E1,
    0x03060C18, 0x8E43C87E, 0x33338561, 0xF49BB8B6, 0x636D1EEA, 0x7BF329EE, 0x53589793, 0x012B5926,
    0x9B47BA97, 0x4E7B2D0D, 0xAB7233EE, 0x34A35DC5, 0xFB2CA865, 0xBBCBCC9D, 0xCB19211C, 0xC113BC55,
    0xE3AC9DEC, 0x5863DBF1, 0xD3991495, 0x22BBAB39, 0x83C78F1E, 0xADD33A61, 0xB3F20667, 0xD70B4AA9,
    0x7BED2B63, 0x985B3E82, 0x4BD8A21A, 0xE2834E4A, 0x1B863991, 0x6DEBDF12, 0x2BB3B0E8, 0x1733AFDA,
    0x8BB86399, 0xF34B3745, 0xBB8DEAE0, 0x8993478D, 0xEBD3716B, 0x06FBD6D5, 0xDBE6F812, 0x7C23A61D,
    0x13F9D516, 0x3373D236, 0x23CC5C6F, 0x49ABA2FE, 0x7392C7E4, 0xC6C333A6, 0x43A74E9D, 0xBC1B436E,
    0xAC4BC9B5, 0x95AC9329, 0x9C7E40CC, 0xEF74E3E1, 0xCC20DB47, 0x601C72B9, 0xFC15523E, 0x1AC40271,
    0x340A7F3A, 0x5594765A, 0x043FF643, 0x2F4C0692, 0x54616DC8, 0xA02497CA, 0x6454E4B1, 0xDAFCE702,
    0xC45F37C0, 0x3E847F9D, 0xF46ABEB9, 0x445C0F55, 0xA4342532, 0xCB349E0D, 0x9401AC4B, 0xB1ECEEC5,
    0x5C1E814F, 0xFEBC9AEE, 0x6C2B0836, 0x8464EA26, 0x3C7593BD, 0x0B0C7B7E, 0x0C401AC4, 0x71D40BB6,
    0x24F5A634, 0xE8A46C12, 0x14C02F4D, 0x927C1CDA, 0x449EB4C6, 0x1D148D82, 0x74AB3DBF, 0x67CCFD4A,
    0xBCB410BB, 0x289C8961, 0x8C8199C2, 0x5244F9A9, 0xDCDF0249, 0xDD2C68F1, 0xECEA8B30, 0xA7F41839,
    0x4CE15841, 0x438C80A6, 0x7CD4D138, 0x3954F06E, 0x2C8A4AB3, 0xB63C6136, 0x1CBFC3CA, 0xCCE411FE,
    0xD4A0EECE, 0x83B465D5, 0xE49567B7, 0xF96C151D, 0xB4CBFC3C, 0x76048445, 0x84FE7545, 0x0CDCF48D,
    0xBD3716B7, 0x6FBD6D5E, 0x8D029FCE, 0x15651D96, 0xDD5C0445, 0x9A0D8CCE, 0xED698D3C, 0xE0D5FC06,
    0x2576A038, 0xAF85882D, 0x15432941, 0xD55DF8E5, 0x451DB2CA, 0x5A3569BD, 0x75283BB3, 0x20ED1975,
    0xD523E8C2, 0xC49581EA, 0xE51661BB, 0xBE4DF122, 0xB548FA30, 0x3125607A, 0x857D7349, 0x4BFD10B2,
    0x4D625E4D, 0x04AD6499, 0x7D57D734, 0x7E751451, 0x2D094CBF, 0xF11D8509, 0x1D3CC5C6, 0x8BC5F5C1,
    0x35897936, 0x12B59265, 0x05BCF04F, 0x686DE2AD, 0x55E26BC4, 0xE70573F5, 0x65D7E2BD, 0x9DDD033D,
    0xADC8CFB9, 0xD28D7716, 0x9DFD46C0, 0xA85507DE, 0xCDA3DD4B, 0x273D9686, 0xFD965432, 0x5DE5E64E,
    0x5D9D8743, 0xB99D7ED1, 0x6DA80E3A, 0xC3450E19, 0x3DF695B1, 0x4C2D9F41, 0x0DC31CC8, 0x36F5EF89,
    0xC5DC31CC, 0x79A59BA2, 0xF5E9B8B5, 0x037DEB6A, 0xA5B7233E, 0x8C157A32, 0x9582AA47, 0xF6CD0AFA,
    0xD625E4DA, 0x4AD64994, 0xE6106DA3, 0x300E395C, 0xB64EF628, 0xBF66A804, 0x867B7F51, 0xC5BED8CC,
    0x4E645255, 0x8AEEACE7, 0x7E51DB2C, 0xF036DC2F, 0x2E0F40A7, 0x7F5E4D77, 0x1E3AC9DE, 0x05863DBF,
    0xBE311AAF, 0xE1FEA520, 0x8E0493D6, 0x9B26D5E8, 0xDE5A085D, 0x144E44B0, 0xEE6F8124, 0x6E963478,
    0x2670AC20, 0x21C64053, 0x16452559, 0x5B1E309B, 0x461BBED2, 0xD476A1C3, 0x762E37AB, 0xAEAED10B,
    0x5E9B8B5B, 0x37DEB6AF, 0x6EAE0222, 0x4D06C667, 0x3EF099A9, 0xC26E573F, 0x0EC510D0, 0xB8B627F7,
    0xC6DA3DD4, 0xF7E653DC, 0xF6EFB4AD, 0x8D3E2314, 0xA6B12F26, 0x0256B24C, 0x9684A65F, 0x788EC284,
    0x368F752E, 0x9CF65A1B, 0x06BAFC57, 0xE62E2AD3, 0x56E467DC, 0x6946BB8B, 0x66D1EEA5, 0x139ECB43,
    0xAECEC3A1, 0x5CCEBF68, 0x9EFB4AD8, 0x2616CFA0, 0xCEA5D153, 0xA97E5EF8, 0xFE90582A, 0xD3A62E30,
    0xC7593BD8, 0xB0C7B7E3, 0xF76CB2A1, 0xCA1FC72B, 0xA732292A, 0x45775673, 0x9707A053, 0x3FAF26BB,
    0x5F188D57, 0x70FF5290, 0x6F2D042E, 0x0A272258, 0x3F739FA5, 0x854FB300, 0x0F4616DC, 0xFF97C3C8,
    0xAF4DC5AD, 0x1BEF5B57, 0x9F784CD4, 0x61372B9F, 0xCF26D75F, 0xEE5FBAC7, 0xFF135E26, 0x9487CA0F,
    0x370C7322, 0xDBD7BE24, 0x0739FA5B, 0xA10FCEEC, 0x576761D0, 0x2E675FB4, 0x6752E8A9, 0x54BF2F7C,
    0x4FE75459, 0xCDCF48D8, 0x7FD2DD20, 0xB7173810, 0x2F8C46AB, 0x387FA948, 0x1FB9CFD2, 0x42A7D980,
    0xD7A6E2D6, 0x0DF7ADAB, 0xE7936BAF, 0x772FDD63, 0xB7CDF024, 0xF8474C3B, 0x87F8795D, 0x829F3CF3,
    0x27F3AA2C, 0x66E7A46C, 0x17C62355, 0x1C3FD4A4, 0x4798B8DE, 0x935745FC, 0x77AD31A7, 0xE98F3534,
    0xBFB21CA3, 0xA6DF411F, 0x8F8795DA, 0xDC0731D7, 0xDFD90E51, 0x536FA08F, 0xEFEC8728, 0x29B7D047
]

# crc64 for xxtea key generation
def crc64(str):
    crc = [0, 0]
    for c in str:
        off = c ^ (crc[0] & 0xFF)

        crc[0] = (crc[0] >> 8) | ((crc[1] & 0xFF) << 24)
        crc[1] >>= 8

        crc[0] ^= crc_dat[off * 2]
        crc[1] ^= crc_dat[off * 2 + 1]
    return [crc[0], crc[1]]

# bitcount calculator for key generation
def bitcount(n):
    n = (n & 0x55555555) + ((n & 0xAAAAAAAA) >> 1)
    n = (n & 0x33333333) + ((n & 0xCCCCCCCC) >> 2)
    n = (n & 0x0F0F0F0F) + ((n & 0xF0F0F0F0) >> 4)
    n = (n & 0x00FF00FF) + ((n & 0xFF00FF00) >> 8)
    n = (n & 0x0000FFFF) + ((n & 0xFFFF0000) >> 16)
    n = (n & 0xFFFFFFFF)
    return n


# xxtea decrypt/encrypt
def xxtea(data, key, encrypt):
    for z in range(0, len(data), 8):
        dword1 = int.from_bytes(data[z:z+4], "little")
        dword2 = int.from_bytes(data[z+4:z+8], "little")

        r = []
        if encrypt:
            r = range(16)
        else:
            r = range(15, -1, -1)
        for i in r:
            tmp = dword2
            dword2 += key[i*3]
            dword2 &= 0xFFFFFFFF
            dword2 = (dword2 >> (key[i*3+2] & 31)) | (dword2 << (-key[i*3+2] & 31))
            dword2 &= 0xFFFFFFFF
            dword2 ^= key[i*3+1]
            dword2 ^= dword1
            dword1 = tmp

        data[z+0:z+4] = dword2.to_bytes(4, "little")
        data[z+4:z+8] = dword1.to_bytes(4, "little")

# generate the xxtea key
DELTA     = 0x9E3779B9
DELTA_SUM = 0xC6EF3720

key = [0]*16*3
crc = crc64(b"This string has no purpose and is merely here to waste your time.")

for i in range(16):
    key[i*3] = crc[0]
    key[i*3+1] = crc[1]
    key[i*3+2] = (bitcount(crc[1]) + bitcount(crc[0])) >> 1
    # shift crc as the QWORD crc[1]:crc[0]
    lowest_bit = crc[0] & 1
    crc[0] = (crc[0] >> 1) | ((crc[1] & 1) << 31)
    crc[1] >>= 1
    if lowest_bit == 1:
        crc[0] ^= DELTA_SUM
        crc[1] ^= DELTA

# decrypt the flag and the data block
bin = []
with open("break", "rb") as file:
    bin = bytearray(file.read())

flag2 = bin[0x0015C100:0x0015C120]
data  = bin[0x00004640:0x0000E280]

xxtea(flag2, key, False)
xxtea(data, key, True)

# load in the decrypted flag3 hex data
data1 = bytearray(binascii.unhexlify(data[0x00008754:0x00008794]))
data2 = bytearray(binascii.unhexlify(data[0x000087D6:0x00008816]))
data3 = bytearray(binascii.unhexlify(data[0x00008795:0x000087D5]))
# correct the byte order
data1.reverse()
data2.reverse()
data3.reverse()

# solve the modulo equation from the program in reverse to get flag3
remainder = int.from_bytes(data3, "little")
modulo    = int.from_bytes(data2, "little")
inverse   = pow(int.from_bytes(data1, "little"), -1, modulo)
flag3     = (inverse*remainder % modulo).to_bytes(24, "little")

flag1 = b"w3lc0mE_t0_Th3_l"

print((flag1 + flag2 + flag3).decode("ascii"))